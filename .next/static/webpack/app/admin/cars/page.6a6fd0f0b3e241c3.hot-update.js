"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/admin/cars/page",{

/***/ "(app-pages-browser)/./src/services/api.ts":
/*!*****************************!*\
  !*** ./src/services/api.ts ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   brandAPI: () => (/* binding */ brandAPI),\n/* harmony export */   carAPI: () => (/* binding */ carAPI),\n/* harmony export */   categoryAPI: () => (/* binding */ categoryAPI),\n/* harmony export */   searchAPI: () => (/* binding */ searchAPI)\n/* harmony export */ });\n/* harmony import */ var _lib_firebase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/firebase */ \"(app-pages-browser)/./src/lib/firebase.ts\");\n\n// Use local Next.js API routes instead of external backend\nconst API_BASE_URL = '';\n// console.log('API_BASE_URL:', API_BASE_URL);\n// console.log('NEXT_PUBLIC_BACKEND_URL:', process.env.NEXT_PUBLIC_BACKEND_URL);\n// Car API endpoints\nconst carAPI = {\n    getAllCars: async ()=>{\n        try {\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/cars\"), {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Cache-Control': 'no-cache',\n                    'cache-control': 'no-cache'\n                }\n            });\n            if (!response.ok) {\n                const error = await response.text();\n                throw new Error(error || 'Failed to fetch cars');\n            }\n            return response.json();\n        } catch (error) {\n            console.error('Error fetching cars:', error);\n            return []; // Return empty array instead of throwing\n        }\n    },\n    getCarsByType: async (type)=>{\n        try {\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/cars/type/\").concat(encodeURIComponent(type)), {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Cache-Control': 'no-cache',\n                    'cache-control': 'no-cache'\n                }\n            });\n            if (!response.ok) {\n                const error = await response.text();\n                throw new Error(error || 'Failed to fetch cars by type');\n            }\n            return response.json();\n        } catch (error) {\n            console.error('Error fetching cars by type:', error);\n            return []; // Return empty array instead of throwing\n        }\n    },\n    getCarsByTag: async (tag)=>{\n        try {\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/cars/tag/\").concat(encodeURIComponent(tag)), {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Cache-Control': 'no-cache',\n                    'cache-control': 'no-cache'\n                }\n            });\n            if (!response.ok) {\n                const error = await response.text();\n                throw new Error(error || 'Failed to fetch cars by tag');\n            }\n            return response.json();\n        } catch (error) {\n            console.error('Error fetching cars by tag:', error);\n            return []; // Return empty array instead of throwing\n        }\n    },\n    getCarsByFuelType: async (fuelType)=>{\n        try {\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/cars/fuel-type/\").concat(encodeURIComponent(fuelType)), {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Cache-Control': 'no-cache',\n                    'cache-control': 'no-cache'\n                }\n            });\n            if (!response.ok) {\n                const error = await response.text();\n                throw new Error(error || 'Failed to fetch cars by fuel type');\n            }\n            return response.json();\n        } catch (error) {\n            console.error('Error fetching cars by fuel type:', error);\n            return []; // Return empty array instead of throwing\n        }\n    },\n    getCarsByBrand: async (brand)=>{\n        try {\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/cars/brand/\").concat(encodeURIComponent(brand)), {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Cache-Control': 'no-cache',\n                    'cache-control': 'no-cache'\n                }\n            });\n            if (!response.ok) {\n                const error = await response.text();\n                throw new Error(error || 'Failed to fetch cars by brand');\n            }\n            return response.json();\n        } catch (error) {\n            console.error('Error fetching cars by brand:', error);\n            return []; // Return empty array instead of throwing\n        }\n    },\n    getFeaturedCars: async ()=>{\n        try {\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/cars/featured\"), {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Cache-Control': 'no-cache',\n                    'cache-control': 'no-cache'\n                }\n            });\n            if (!response.ok) {\n                const error = await response.text();\n                throw new Error(error || 'Failed to fetch featured cars');\n            }\n            return response.json();\n        } catch (error) {\n            console.error('Error fetching featured cars:', error);\n            return []; // Return empty array instead of throwing\n        }\n    },\n    getCarById: async (id)=>{\n        try {\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/cars/\").concat(encodeURIComponent(id)), {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Cache-Control': 'no-cache',\n                    'cache-control': 'no-cache'\n                }\n            });\n            if (!response.ok) {\n                const error = await response.text();\n                throw new Error(error || 'Failed to fetch car');\n            }\n            return response.json();\n        } catch (error) {\n            console.error('Error fetching car:', error);\n            throw error; // Re-throw the error\n        }\n    },\n    createCar: async (car)=>{\n        try {\n            if (!_lib_firebase__WEBPACK_IMPORTED_MODULE_0__.auth.currentUser) {\n                throw new Error('Not authenticated');\n            }\n            const token = await _lib_firebase__WEBPACK_IMPORTED_MODULE_0__.auth.currentUser.getIdToken();\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/cars\"), {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': \"Bearer \".concat(token)\n                },\n                body: JSON.stringify(car)\n            });\n            if (!response.ok) {\n                const error = await response.text();\n                throw new Error(error || 'Failed to create car');\n            }\n            return response.json();\n        } catch (error) {\n            console.error('Error creating car:', error);\n            throw error;\n        }\n    },\n    updateCar: async (id, car)=>{\n        try {\n            if (!_lib_firebase__WEBPACK_IMPORTED_MODULE_0__.auth.currentUser) {\n                throw new Error('Not authenticated');\n            }\n            const token = await _lib_firebase__WEBPACK_IMPORTED_MODULE_0__.auth.currentUser.getIdToken();\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/cars/\").concat(encodeURIComponent(id)), {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': \"Bearer \".concat(token)\n                },\n                body: JSON.stringify(car)\n            });\n            if (!response.ok) {\n                const error = await response.text();\n                throw new Error(error || 'Failed to update car');\n            }\n            const updatedCar = await response.json();\n            return updatedCar;\n        } catch (error) {\n            console.error('Error updating car:', error);\n            throw error;\n        }\n    },\n    deleteCar: async (id)=>{\n        try {\n            if (!_lib_firebase__WEBPACK_IMPORTED_MODULE_0__.auth.currentUser) {\n                throw new Error('Not authenticated');\n            }\n            const token = await _lib_firebase__WEBPACK_IMPORTED_MODULE_0__.auth.currentUser.getIdToken();\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/cars/\").concat(encodeURIComponent(id)), {\n                method: 'DELETE',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': \"Bearer \".concat(token)\n                }\n            });\n            if (!response.ok) {\n                const errorData = await response.json().catch(()=>null);\n                throw new Error((errorData === null || errorData === void 0 ? void 0 : errorData.error) || 'Failed to delete car');\n            }\n        } catch (error) {\n            console.error('Error deleting car:', error);\n            throw error;\n        }\n    }\n};\n// Category API endpoints\nconst categoryAPI = {\n    getCategoriesByType: async (type)=>{\n        try {\n            var _auth_currentUser;\n            const token = await ((_auth_currentUser = _lib_firebase__WEBPACK_IMPORTED_MODULE_0__.auth.currentUser) === null || _auth_currentUser === void 0 ? void 0 : _auth_currentUser.getIdToken());\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/categories/type/\").concat(encodeURIComponent(type)), {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': token ? \"Bearer \".concat(token) : '',\n                    'Cache-Control': 'no-cache',\n                    'cache-control': 'no-cache'\n                }\n            });\n            if (!response.ok) {\n                const error = await response.text();\n                throw new Error(error || 'Failed to fetch categories by type');\n            }\n            return response.json();\n        } catch (error) {\n            console.error('Error fetching categories by type:', error);\n            return [];\n        }\n    },\n    getCategoryBySlug: async (slug)=>{\n        try {\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/categories/slug/\").concat(encodeURIComponent(slug)), {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Cache-Control': 'no-cache',\n                    'cache-control': 'no-cache'\n                }\n            });\n            if (!response.ok) {\n                if (response.status === 404) {\n                    return null;\n                }\n                const error = await response.text();\n                throw new Error(error || 'Failed to fetch category by slug');\n            }\n            return response.json();\n        } catch (error) {\n            console.error('Error fetching category by slug:', error);\n            return null;\n        }\n    },\n    getFeaturedCategories: async ()=>{\n        try {\n            var _auth_currentUser;\n            const token = await ((_auth_currentUser = _lib_firebase__WEBPACK_IMPORTED_MODULE_0__.auth.currentUser) === null || _auth_currentUser === void 0 ? void 0 : _auth_currentUser.getIdToken());\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/categories/featured\"), {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': token ? \"Bearer \".concat(token) : '',\n                    'Cache-Control': 'no-cache',\n                    'cache-control': 'no-cache'\n                }\n            });\n            if (!response.ok) {\n                const error = await response.text();\n                throw new Error(error || 'Failed to fetch featured categories');\n            }\n            return response.json();\n        } catch (error) {\n            console.error('Error fetching featured categories:', error);\n            return [];\n        }\n    },\n    createCategory: async (category)=>{\n        try {\n            var _auth_currentUser;\n            const token = await ((_auth_currentUser = _lib_firebase__WEBPACK_IMPORTED_MODULE_0__.auth.currentUser) === null || _auth_currentUser === void 0 ? void 0 : _auth_currentUser.getIdToken());\n            if (!token) {\n                throw new Error('Not authenticated');\n            }\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/categories\"), {\n                method: 'POST',\n                headers: {\n                    'Authorization': \"Bearer \".concat(token),\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(category)\n            });\n            if (!response.ok) {\n                const errorText = await response.text();\n                console.error('Server response:', {\n                    status: response.status,\n                    statusText: response.statusText,\n                    body: errorText\n                });\n                throw new Error(errorText || 'Failed to create category');\n            }\n            return response.json();\n        } catch (error) {\n            console.error('Error creating category:', error);\n            throw error;\n        }\n    },\n    updateCategory: async (id, category)=>{\n        try {\n            var _auth_currentUser;\n            const token = await ((_auth_currentUser = _lib_firebase__WEBPACK_IMPORTED_MODULE_0__.auth.currentUser) === null || _auth_currentUser === void 0 ? void 0 : _auth_currentUser.getIdToken());\n            if (!token) {\n                throw new Error('Not authenticated');\n            }\n            console.log('Updating category with ID:', id);\n            console.log('Category data:', category);\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/categories/\").concat(encodeURIComponent(id)), {\n                method: 'PUT',\n                headers: {\n                    'Authorization': \"Bearer \".concat(token),\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(category)\n            });\n            if (!response.ok) {\n                const errorText = await response.text();\n                console.error('Server error response:', errorText);\n                try {\n                    const errorData = JSON.parse(errorText);\n                    throw new Error(errorData.error || 'Failed to update category');\n                } catch (e) {\n                    throw new Error(errorText || 'Failed to update category');\n                }\n            }\n            const result = await response.json();\n            console.log('Update successful:', result);\n            return result;\n        } catch (error) {\n            console.error('Error updating category:', error);\n            throw error;\n        }\n    },\n    deleteCategory: async (id)=>{\n        try {\n            if (!_lib_firebase__WEBPACK_IMPORTED_MODULE_0__.auth.currentUser) {\n                throw new Error('Not authenticated');\n            }\n            const token = await _lib_firebase__WEBPACK_IMPORTED_MODULE_0__.auth.currentUser.getIdToken();\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/categories/\").concat(encodeURIComponent(id)), {\n                method: 'DELETE',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': \"Bearer \".concat(token)\n                }\n            });\n            if (!response.ok) {\n                const errorData = await response.json().catch(()=>null);\n                throw new Error((errorData === null || errorData === void 0 ? void 0 : errorData.error) || 'Failed to delete category');\n            }\n        } catch (error) {\n            console.error('Error deleting category:', error);\n            throw error;\n        }\n    }\n};\n// Brand API endpoints\nconst brandAPI = {\n    getAllBrands: async ()=>{\n        try {\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/brands\"), {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Cache-Control': 'no-cache',\n                    'cache-control': 'no-cache'\n                }\n            });\n            if (!response.ok) {\n                const errorData = await response.json().catch(()=>null);\n                const errorMessage = (errorData === null || errorData === void 0 ? void 0 : errorData.error) || 'Failed to fetch brands';\n                console.error('Server error:', errorMessage);\n                return [];\n            }\n            return response.json();\n        } catch (error) {\n            console.error('Error fetching brands:', error);\n            return [];\n        }\n    },\n    getBrandBySlug: async (slug)=>{\n        try {\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/brands/slug/\").concat(encodeURIComponent(slug)), {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Cache-Control': 'no-cache',\n                    'cache-control': 'no-cache'\n                }\n            });\n            if (!response.ok) {\n                const errorData = await response.json().catch(()=>null);\n                if (response.status === 404) return null;\n                const errorMessage = (errorData === null || errorData === void 0 ? void 0 : errorData.error) || 'Failed to fetch brand';\n                console.error('Server error:', errorMessage);\n                return null;\n            }\n            return response.json();\n        } catch (error) {\n            console.error('Error fetching brand:', error);\n            return null;\n        }\n    },\n    getFeaturedBrands: async ()=>{\n        try {\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/brands/featured\"), {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Cache-Control': 'no-cache',\n                    'cache-control': 'no-cache'\n                }\n            });\n            if (!response.ok) {\n                const errorData = await response.json().catch(()=>null);\n                const errorMessage = (errorData === null || errorData === void 0 ? void 0 : errorData.error) || 'Failed to fetch featured brands';\n                console.error('Server error:', errorMessage);\n                return [];\n            }\n            return response.json();\n        } catch (error) {\n            console.error('Error fetching featured brands:', error);\n            return [];\n        }\n    },\n    createBrand: async (brand)=>{\n        try {\n            if (!_lib_firebase__WEBPACK_IMPORTED_MODULE_0__.auth.currentUser) {\n                throw new Error('Not authenticated');\n            }\n            const token = await _lib_firebase__WEBPACK_IMPORTED_MODULE_0__.auth.currentUser.getIdToken();\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/brands\"), {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': \"Bearer \".concat(token)\n                },\n                body: JSON.stringify(brand)\n            });\n            if (!response.ok) {\n                const errorData = await response.json().catch(()=>null);\n                throw new Error((errorData === null || errorData === void 0 ? void 0 : errorData.error) || 'Failed to create brand');\n            }\n            return response.json();\n        } catch (error) {\n            console.error('Error creating brand:', error);\n            throw error;\n        }\n    },\n    updateBrand: async (id, brand)=>{\n        try {\n            if (!_lib_firebase__WEBPACK_IMPORTED_MODULE_0__.auth.currentUser) {\n                throw new Error('Not authenticated');\n            }\n            const token = await _lib_firebase__WEBPACK_IMPORTED_MODULE_0__.auth.currentUser.getIdToken();\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/brands/\").concat(id), {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': \"Bearer \".concat(token)\n                },\n                body: JSON.stringify(brand)\n            });\n            if (!response.ok) {\n                const errorData = await response.json().catch(()=>null);\n                throw new Error((errorData === null || errorData === void 0 ? void 0 : errorData.error) || 'Failed to update brand');\n            }\n            return response.json();\n        } catch (error) {\n            console.error('Error updating brand:', error);\n            throw error;\n        }\n    },\n    deleteBrand: async (id)=>{\n        try {\n            if (!_lib_firebase__WEBPACK_IMPORTED_MODULE_0__.auth.currentUser) {\n                throw new Error('Not authenticated');\n            }\n            const token = await _lib_firebase__WEBPACK_IMPORTED_MODULE_0__.auth.currentUser.getIdToken();\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/brands/\").concat(id), {\n                method: 'DELETE',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': \"Bearer \".concat(token)\n                }\n            });\n            if (!response.ok) {\n                const errorData = await response.json().catch(()=>null);\n                throw new Error((errorData === null || errorData === void 0 ? void 0 : errorData.error) || 'Failed to delete brand');\n            }\n        } catch (error) {\n            console.error('Error deleting brand:', error);\n            throw error;\n        }\n    }\n};\n// Search API endpoint\nconst searchAPI = {\n    search: async (query)=>{\n        try {\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/api/search?q=\").concat(encodeURIComponent(query)), {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Cache-Control': 'no-cache'\n                }\n            });\n            if (!response.ok) {\n                throw new Error('Search request failed');\n            }\n            const results = await response.json();\n            return results;\n        } catch (error) {\n            console.error('Error searching cars:', error);\n            return [];\n        }\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/services/api.ts\n"));

/***/ })

});